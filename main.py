import telebot
from telebot import types
import os
import sqlite3
import re
import threading
import time
from datetime import datetime

TOKEN = '5780848157:AAEr7aF0jRYIigm9PHv4T_2ojxxKSF6dxWI'
bot = telebot.TeleBot(TOKEN)

MAX_DBS_PER_USER = 20


def create_user_folder(chat_id):
    if not os.path.exists("users_data"):
        os.mkdir("users_data")
    user_folder = f"users_data/{chat_id}"
    if not os.path.exists(user_folder):
        os.mkdir(user_folder)
    return user_folder


def can_create_more_dbs(chat_id):
    user_folder = create_user_folder(chat_id)
    existing_dbs = [f for f in os.listdir(user_folder) if f.endswith('.sqlite')]
    return len(existing_dbs) < MAX_DBS_PER_USER


def is_valid_db_name(name):
    return bool(re.match(r'^[a-zA-Z0-9_]+$', name))


def create_db_if_not_exists(chat_id, db_name):
    user_folder = create_user_folder(chat_id)
    db_path = f"{user_folder}/{db_name}.sqlite"

    if os.path.exists(db_path):
        return False

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS problems (
            problem_id INTEGER PRIMARY KEY AUTOINCREMENT,
            problem TEXT NOT NULL,
            time_create DATETIME DEFAULT CURRENT_TIMESTAMP,
            time_send DATETIME NOT NULL
        )"""
    )
    conn.commit()
    conn.close()
    return True


def get_user_dbs(chat_id):
    user_folder = create_user_folder(chat_id)
    return [f for f in os.listdir(user_folder) if f.endswith('.sqlite')]


def add_problem_to_db(chat_id, db_name, problem, time_send):
    user_folder = create_user_folder(chat_id)
    db_path = f"{user_folder}/{db_name}.sqlite"

    if not os.path.exists(db_path):
        return False

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO problems (problem, time_send) VALUES (?, ?)",
        (problem, time_send)
    )
    conn.commit()
    conn.close()
    return True


def get_problems_from_db(chat_id, db_name):
    user_folder = create_user_folder(chat_id)
    db_path = f"{user_folder}/{db_name}.sqlite"

    if not os.path.exists(db_path):
        return None

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("SELECT problem_id, problem, time_create, time_send FROM problems")
    problems = cursor.fetchall()
    conn.close()
    return problems


def delete_problem_from_db(chat_id, db_name, problem_id):
    user_folder = create_user_folder(chat_id)
    db_path = f"{user_folder}/{db_name}.sqlite"

    if not os.path.exists(db_path):
        return False

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(
        "DELETE FROM problems WHERE problem_id = ?",
        (problem_id,)
    )
    conn.commit()
    conn.close()
    return True


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_folder = create_user_folder(message.chat.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìÖ –†–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è", "‚úÖ –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞")

    bot.send_message(
        message.chat.id,
        f"üîπ –í–∞—à–∞ –ø–∞–ø–∫–∞: `{user_folder}`\n"
        f"–ú–∞–∫—Å–∏–º—É–º –ë–î: {MAX_DBS_PER_USER}\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newproblemlist –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–∞–¥–∞—á.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delproblemlist –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addproblem –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delproblem –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.",
        reply_markup=markup,
        parse_mode="Markdown"
    )


# –ö–æ–º–∞–Ω–¥–∞ /newproblemlist
@bot.message_handler(commands=['newproblemlist'])
def handle_new_problem(message):
    chat_id = message.chat.id

    if not can_create_more_dbs(chat_id):
        bot.send_message(chat_id, f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç ({MAX_DBS_PER_USER} –ë–î –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)!")
        return

    msg = bot.send_message(
        chat_id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ _):",
        reply_markup=types.ForceReply(selective=True)
    )
    bot.register_next_step_handler(msg, process_db_name)


def process_db_name(message):
    chat_id = message.chat.id
    db_name = message.text.strip()

    if not db_name:
        bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    if not is_valid_db_name(db_name):
        bot.send_message(chat_id, "‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _!")
        return

    if not can_create_more_dbs(chat_id):
        bot.send_message(chat_id, f"‚ùå –£ –≤–∞—Å —É–∂–µ {MAX_DBS_PER_USER} –ë–î! –ù–æ–≤—ã–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.")
        return

    try:
        if create_db_if_not_exists(chat_id, db_name):
            bot.send_message(chat_id, f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö `{db_name}.sqlite` —Å–æ–∑–¥–∞–Ω–∞!", parse_mode="Markdown")
        else:
            bot.send_message(chat_id, f"‚ùå –§–∞–π–ª `{db_name}.sqlite` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ /delproblemlist
@bot.message_handler(commands=['delproblemlist'])
def handle_delete_problem_list(message):
    chat_id = message.chat.id
    dbs = get_user_dbs(chat_id)

    if not dbs:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ë–î –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return

    markup = types.InlineKeyboardMarkup()
    for db in dbs:
        markup.add(types.InlineKeyboardButton(db, callback_data=f"delete_db:{db}"))

    bot.send_message(
        chat_id,
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ë–î –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –ë–î
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_db:"))
def handle_delete_db(call):
    chat_id = call.message.chat.id
    db_name = call.data.split(":")[1]
    user_folder = create_user_folder(chat_id)
    db_path = f"{user_folder}/{db_name}"

    try:
        os.remove(db_path)
        bot.answer_callback_query(call.id, f"‚úÖ {db_name} —É–¥–∞–ª–µ–Ω–∞!")
        bot.edit_message_text(
            f"üóë –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö `{db_name}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            chat_id,
            call.message.message_id
        )
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ /addproblem
@bot.message_handler(commands=['addproblem'])
def handle_add_problem(message):
    chat_id = message.chat.id
    command_parts = message.text.split()

    if len(command_parts) < 2:
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ü—Ä–∏–º–µ—Ä: `/addproblem problem1:wakeup:1:8:45`\n"
            "–ò–ª–∏: `/addproblem problem1:wakeup::8:45` (–¥–∞—Ç–∞ = —Å–µ–≥–æ–¥–Ω—è)",
            parse_mode="Markdown"
        )
        return

    args = command_parts[1].split(':')
    if len(args) < 5:
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!\n"
            "–§–æ—Ä–º–∞—Ç: `–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–¥:–∑–∞–¥–∞—á–∞:–¥–µ–Ω—å:—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã`\n"
            "–ü—Ä–∏–º–µ—Ä: `problem1:wakeup:1:8:45`",
            parse_mode="Markdown"
        )
        return

    db_name = args[0]
    problem_text = args[1]
    day = args[2]
    hours = args[3]
    minutes = args[4]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
    if not hours.isdigit() or not minutes.isdigit():
        bot.send_message(chat_id, "‚ùå –ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        return

    hours = int(hours)
    minutes = int(minutes)

    if hours < 0 or hours > 23 or minutes < 0 or minutes > 59:
        bot.send_message(chat_id, "‚ùå –ß–∞—Å—ã (0-23) –∏ –º–∏–Ω—É—Ç—ã (0-59) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ!")
        return

    # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π
    if not day:
        today = datetime.now().day
        day = str(today)
    elif not day.isdigit():
        bot.send_message(chat_id, "‚ùå –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (1-31) –∏–ª–∏ –ø—É—Å—Ç—ã–º!")
        return

    day = int(day)
    if day < 1 or day > 31:
        bot.send_message(chat_id, "‚ùå –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31!")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É (–≥–æ–¥ –∏ –º–µ—Å—è—Ü –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–µ)
    now = datetime.now()
    try:
        time_send = datetime(now.year, now.month, day, hours, minutes).strftime("%Y-%m-%d %H:%M:%S")
    except ValueError:
        bot.send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31 —Ñ–µ–≤—Ä–∞–ª—è)!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ë–î
    user_folder = create_user_folder(chat_id)
    db_path = f"{user_folder}/{db_name}.sqlite"
    if not os.path.exists(db_path):
        bot.send_message(chat_id, f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö `{db_name}.sqlite` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    if add_problem_to_db(chat_id, db_name, problem_text, time_send):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        problems = get_problems_from_db(chat_id, db_name)
        if not problems:
            bot.send_message(chat_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            return

        tasks_list = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
        for task in problems:
            task_id, task_text, time_create, time_send = task
            tasks_list += (
                f"üîπ ID: {task_id}\n"
                f"üìå –ó–∞–¥–∞—á–∞: {task_text}\n"
                f"üïí –°–æ–∑–¥–∞–Ω–∞: {time_create}\n"
                f"‚è∞ –í—ã–ø–æ–ª–Ω–∏—Ç—å: {time_send}\n\n"
            )

        bot.send_message(chat_id, tasks_list)
    else:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!")


# –ö–æ–º–∞–Ω–¥–∞ /delproblem
@bot.message_handler(commands=['delproblem'])
def handle_delete_problem(message):
    chat_id = message.chat.id
    command_parts = message.text.split()

    if len(command_parts) < 2:
        bot.send_message(
            chat_id,
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ë–î!\n"
            "–ü—Ä–∏–º–µ—Ä: `/delproblem tasks1`",
            parse_mode="Markdown"
        )
        return

    db_name = command_parts[1]
    user_folder = create_user_folder(chat_id)
    db_path = f"{user_folder}/{db_name}.sqlite"

    if not os.path.exists(db_path):
        bot.send_message(chat_id, f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö `{db_name}.sqlite` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", parse_mode="Markdown")
        return

    problems = get_problems_from_db(chat_id, db_name)
    if not problems:
        bot.send_message(chat_id, "‚ùå –í —ç—Ç–æ–π –ë–î –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return

    markup = types.InlineKeyboardMarkup()
    for task in problems:
        task_id, task_text, _, time_send = task
        markup.add(
            types.InlineKeyboardButton(
                f"‚ùå {task_id}: {task_text} (–¥–æ {time_send})",
                callback_data=f"delete_task:{db_name}:{task_id}"
            )
        )

    bot.send_message(
        chat_id,
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_task:"))
def handle_delete_task(call):
    chat_id = call.message.chat.id
    _, db_name, problem_id = call.data.split(':')

    if delete_problem_from_db(chat_id, db_name, problem_id):
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
        bot.edit_message_text(
            f"üóë –ó–∞–¥–∞—á–∞ –≤ `{db_name}.sqlite` (ID: {problem_id}) —É–¥–∞–ª–µ–Ω–∞.",
            chat_id,
            call.message.message_id
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")


import threading
import time
from datetime import datetime


def check_and_notify():
    while True:
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        nearest_task = None

        for user_folder in os.listdir("users_data"):
            if not user_folder.isdigit():
                continue

            chat_id = int(user_folder)
            user_dbs = get_user_dbs(chat_id)

            for db_name in user_dbs:
                problems = get_problems_from_db(chat_id, db_name.replace(".sqlite", ""))
                if not problems:
                    continue

                for task in problems:
                    _, task_text, _, time_send = task
                    if time_send == now:
                        bot.send_message(
                            chat_id,
                            f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\nüìå –ó–∞–¥–∞—á–∞: `{task_text}`\nüïí –í—Ä–µ–º—è: `{time_send}`",
                            parse_mode="Markdown"
                        )
                        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        delete_problem_from_db(chat_id, db_name.replace(".sqlite", ""), task[0])

                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    task_time = datetime.strptime(time_send, "%Y-%m-%d %H:%M:%S")
                    if task_time > datetime.now():
                        if nearest_task is None or task_time < nearest_task[0]:
                            nearest_task = (task_time, chat_id, db_name, task_text)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–ª–∏–∂–∞–π—à–∞—è –∑–∞–¥–∞—á–∞, –∂–¥—ë–º –¥–æ –µ—ë –≤—Ä–µ–º–µ–Ω–∏
        if nearest_task:
            wait_time = (nearest_task[0] - datetime.now()).total_seconds()
            time.sleep(min(wait_time, 1))  # –ñ–¥—ë–º –Ω–µ –±–æ–ª–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
        else:
            time.sleep(1)  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª


if __name__ == '__main__':
    reminder_thread = threading.Thread(target=check_and_notify, daemon=True)
    reminder_thread.start()
    bot.polling(none_stop=True)

